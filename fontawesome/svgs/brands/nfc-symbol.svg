//===----------------------------------------------------------------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is dual licensed under the MIT and the University of Illinois Open
// Source Licenses. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

// type_traits

// is_member_pointer

#include <type_traits>
#include <cstddef>         // for std::nullptr_t
#include "test_macros.h"

template <class T>
void test_is_member_pointer()
{
    static_assert( std::is_member_pointer<T>::value, "");
    static_assert( std::is_member_pointer<const T>::value, "");
    static_assert( std::is_member_pointer<volatile T>::value, "");
    static_assert( std::is_member_pointer<const volatile T>::value, "");
#if TEST_STD_VER > 14
    static_assert( std::is_member_pointer_v<T>, "");
    static_assert( std::is_member_pointer_v<const T>, "");
    static_assert( std::is_member_pointer_v<volatile T>, "");
    static_assert( std::is_member_pointer_v<const volatile T>, "");
#endif
}

template <class T>
void test_is_not_member_pointer()
{
    static_assert(!std::is_member_pointer<T>::value, "");
    static_assert(!std::is_member_pointer<const T>::value, "");
    static_assert(!std::is_member_pointer<volatile T>::value, "");
    static_assert(!std::is_member_pointer<con